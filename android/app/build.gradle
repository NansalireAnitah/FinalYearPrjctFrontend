plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id "com.google.gms.google-services"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

// Commented out keystore properties for now
// def keystoreProperties = new Properties()
// def keystorePropertiesFile = rootProject.file('key.properties')
// if (keystorePropertiesFile.exists()) {
//     keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
// }

android {
    namespace "com.sungura.app"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion "27.0.12077973"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    defaultConfig {
        applicationId "com.sungura.app"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
        resConfigs "en", "us"
        manifestPlaceholders = [
            'appAuthRedirectScheme': 'com.sungura.app'
        ]
    }

    // Commented out signing configs for now
    // signingConfigs {
    //     release {
    //         keyAlias keystoreProperties['keyAlias']
    //         keyPassword keystoreProperties['keyPassword']
    //         storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
    //         storePassword keystoreProperties['storePassword']
    //     }
    // }

     buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.getByName("debug")
        }
    }
}

flutter {
    source '../..'
}

// Add this to patch flutter_secure_storage
subprojects {
    afterEvaluate { project ->
        if (project.name == 'flutter_secure_storage') {
            android {
                namespace 'com.it_nomads.fluttersecurestorage'
                compileSdkVersion flutter.compileSdkVersion
                defaultConfig {
                    minSdkVersion flutter.minSdkVersion
                }
            }
        }
    }
}

dependencies {
    implementation platform('com.google.firebase:firebase-bom:32.7.0')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-auth-ktx'
    implementation 'com.google.firebase:firebase-firestore-ktx'
    implementation 'com.google.android.gms:play-services-auth:20.7.0'
    implementation 'com.google.android.gms:play-services-auth-api-phone:18.0.1'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.22'
    implementation 'androidx.core:core-ktx:1.12.0'
}

apply plugin: 'com.google.gms.google-services'

subprojects {
    afterEvaluate { project ->
        if (project.name == 'geolocator_android') {
            android {
                compileSdkVersion flutter.compileSdkVersion
                defaultConfig {
                    minSdkVersion flutter.minSdkVersion
                }
            }
        }
    }
}